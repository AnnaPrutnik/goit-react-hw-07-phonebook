{"version":3,"sources":["redux/phonebook/phonebook-operation.js","redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-reducer.js","redux/phonebook/phonebook-selectors.js","components/Forms/Form.js","components/UserList/UserItem.js","components/UserList/UsersList.js","components/Section/Section.js","components/Forms/Filter.js","Pages/ContactPage.js","App.js","redux/store.js","index.js"],"names":["axios","defaults","baseURL","fetchContacts","createAsyncThunk","a","data","addContact","userData","post","responce","deleteContact","id","delete","changeFilter","createAction","contactsOperation","contactsActions","items","createReducer","fulfilled","_","payload","state","filter","contact","error","pending","rejected","loading","contactReducer","combineReducers","getItems","getFilter","getFilteredContacts","createSelector","contacts","normaliezedFilter","toLowerCase","name","includes","Form","useState","setName","phone","setPhone","useSelector","dispatch","useDispatch","handlerChange","target","value","onSubmit","e","preventDefault","normalizedContactName","find","checkDoubleContact","alert","className","htmlFor","type","onChange","autoComplete","pattern","title","required","UserItem","user","onClick","UserList","users","map","Section","children","Filter","ContactPage","useEffect","App","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0553b000.chunk.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://619e058d131c60001708928a.mockapi.io';\n\nexport const fetchContacts = createAsyncThunk('contacts/fetch', async () => {\n  const { data } = await axios('/contacts');\n  return data;\n});\n\nexport const addContact = createAsyncThunk('contacts/add', async userData => {\n  const responce = await axios.post('/contacts', userData);\n  return responce.data;\n});\n\nexport const deleteContact = createAsyncThunk('contacts/delete', async id => {\n  const responce = await axios.delete(`/contacts/${id}`);\n  return responce.data.id;\n});\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const changeFilter = createAction('contact/changeFilter');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as contactsActions from './phonebook-actions';\nimport * as contactsOperation from './phonebook-operation';\n\nconst { fetchContacts, addContact, deleteContact } = contactsOperation;\n\nconst { changeFilter } = contactsActions;\n\nconst items = createReducer([], {\n  [fetchContacts.fulfilled]: (_, { payload }) => [...payload],\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\n  [deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst error = createReducer(null, {\n  [fetchContacts.pending]: () => null,\n  [addContact.pending]: () => null,\n  [deleteContact.pending]: () => null,\n  [fetchContacts.rejected]: (_, { payload }) => payload,\n  [addContact.rejected]: (_, { payload }) => payload,\n  [deleteContact.rejected]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst contactReducer = combineReducers({\n  items,\n  error,\n  loading,\n  filter,\n});\n\nexport default contactReducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getItems = state => state.contact.items;\nexport const getFilter = state => state.contact.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getItems, getFilter],\n  (contacts, filter) => {\n    const normaliezedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normaliezedFilter),\n    );\n  },\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact, getItems } from '../../redux/phonebook';\nimport './Forms.scss';\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  const handlerChange = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const checkDoubleContact = () => {\n    const normalizedContactName = name.toLowerCase();\n    return contacts.find(\n      contact => contact.name.toLowerCase() === normalizedContactName,\n    );\n  };\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n    const double = checkDoubleContact();\n    if (double) {\n      alert(`Contact with name ${name} already exist`);\n      return;\n    }\n    const newUser = { name, phone };\n    dispatch(addContact(newUser));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handlerSubmit} className=\"form\">\n      <div className=\"wrapper\">\n        <label htmlFor=\"name\" className=\"label\">\n          Name\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            className=\"input\"\n            onChange={handlerChange}\n            autoComplete=\"off\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor=\"phone\" className=\"label\">\n          Phone\n          <input\n            id=\"phone\"\n            type=\"tel\"\n            name=\"phone\"\n            value={phone}\n            className=\"input\"\n            autoComplete=\"off\"\n            onChange={handlerChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n      </div>\n      <button type=\"submit\" className=\"btn\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/phonebook';\nimport './User.scss';\n\nfunction UserItem({ user }) {\n  const dispatch = useDispatch();\n  const onDeleteContact = e => dispatch(deleteContact(e.target.id));\n\n  const { id, name, phone } = user;\n\n  return (\n    <li className=\"item\">\n      <span>\n        {name}: {phone}\n      </span>\n      <button id={id} type=\"button\" onClick={onDeleteContact} className=\"btn\">\n        Delete\n      </button>\n    </li>\n  );\n}\n\nUserItem.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n\nexport default UserItem;\n","// import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport UserItem from './UserItem';\nimport { getFilteredContacts } from '../../redux/phonebook';\n\nimport './User.scss';\n\nfunction UserList() {\n  const users = useSelector(getFilteredContacts);\n\n  return (\n    <ul className=\"list\">\n      {users.map(user => (\n        <UserItem key={user.id} user={user} />\n      ))}\n    </ul>\n  );\n}\n\nexport default UserList;\n","import PropTypes from 'prop-types';\nimport './Section.scss';\n\nfunction Section({ title, children }) {\n  return (\n    <section className=\"section\">\n      {title && <h2 className=\"title\">{title}</h2>}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter, changeFilter } from '../../redux/phonebook';\n\nimport './Forms.scss';\n\nfunction Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const omChangeFilter = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <label htmlFor=\"filter\" className=\"label filterLabel\">\n      Find contacts by name\n      <input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        autoComplete=\"off\"\n        value={filter}\n        onChange={omChangeFilter}\n        className=\"input filterInput\"\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Form from '../components/Forms/Form';\nimport UserList from '../components/UserList/UsersList';\nimport Section from '../components/Section/Section';\nimport Filter from '../components/Forms/Filter';\n\nimport { fetchContacts } from '../redux/phonebook';\n\nfunction ContactPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Phonebook</h1>\n      <Section>\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <UserList />\n      </Section>\n    </div>\n  );\n}\n\nexport default ContactPage;\n","import './App.css';\nimport ContactPage from './Pages/ContactPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ContactPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport contactReducer from './phonebook/phonebook-reducer';\n\nconst store = configureStore({\n  reducer: {\n    contact: contactReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}